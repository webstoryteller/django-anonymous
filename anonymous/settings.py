"""
Django settings for anonymous project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# AWS 적용시 default로 되어 있는 SECRET_KEY 삭제. 비활성화
# SECURITY WARNING: keep the secret key used in production secret!

# SECRET_KEY = 'django-insecure-yfyt+sk2(urr9tert69zw1q)tj21*fdhmr!=)2#+(*3=id#+1f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user',
    'board',
    'storages' # AWS S3 접근
]

AUTH_USER_MODEL = 'user.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'anonymous.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'templates', # 가장 상단에 있는 templates 폴더도 포함하여 앱의 templates도 html 렌더링한다는 뜻
        ],
        'APP_DIRS': True, # django가 알아서 앱의 templates를 인식할 수 있도록 하는 것임.
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'anonymous.common_context.img_url_context' # 전역적으로 (전체 웹사이트)에서 img_url 사용 가능하도록 함
            ],
        },
    },
]

WSGI_APPLICATION = 'anonymous.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

"""
# AWS RDS DATABASE 연결시, 아래 env_json 밑에서 다시 작성하여 딕셔너리의 값을 사용할 수 있도록 함.
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',

    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'anonymous',
        'USER': 'postgres',
        'PASSWORD': '1234',
        'HOST': 'localhost',
        'PORT': '5432'

    }
}
"""


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# MEDIA_ROOT = 'upload' # upload라는 폴더에 이미지 저장. AWS 사용시 비활성화
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field


# 미디어 파일 설정 
# AWS S3에 이미지 등 저장. env.json 에 관련 정보 저장
# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage" 


STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage", # Amazon S3 백엔드 사용
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}


import json

env_json = 'env.json' # 경로 확인할 것. env.json을 읽을 수 있게 사전으로 등록하는 것
with open(env_json) as f:
    env_json = json.loads(f.read())

    # print(type(env_json))   # 확인. runserver 후 터미널 창에 env.json을 사전 <class 'dict'>로 내용 출력

    AWS_ACCESS_KEY_ID=env_json['AWS_ACCESS_KEY_ID']         # S3Boto3Storage라는 패키지에서 가져온 변수 지정
    AWS_SECRET_ACCESS_KEY=env_json['AWS_SECRET_ACCESS_KEY'] # S3Boto3Storage라는 패키지에서 가져온 변수 지정
    AWS_STORAGE_BUCKET_NAME = env_json['S3_BUCKET_NAME']    # S3Boto3Storage라는 패키지에서 가져온 변수 지정
    
    S3_ROOT_URL = env_json['S3_ROOT_URL']                   # 임의로 만든 변수
    SECRET_KEY = env_json['SECRET_KEY']

    # print(AWS_ACCESS_KEY_ID)
    # print(AWS_SECRET_ACCESS_KEY)
    # print(AWS_STORAGE_BUCKET_NAME)
    # print(S3_ROOT_URL)
    # print(SECRET_KEY)

# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage" # django 5.2.5 버전에서는 작동하지 않는 명령어이므로 위쪽 STORAGES 스크립트 명령어로 작성해야 함.

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',

    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME':env_json['DATABASE_NAME'],
        'USER':env_json['DATABASE_USER_NAME'],
        'PASSWORD':env_json['DATABASE_PASSWORD'],
        'HOST':env_json['DATABASE_HOST'],
        'PORT': '5432'

    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
